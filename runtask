#!/bin/bash

cd "$(dirname "$0")"

function define() {
  # using '|| true' to exit normally; 'read' does not
  read -r -d '' "$1" || true
}

define PHP_HEADER <<EOF
<?php
/* Copyright Â© 2015 Arne Ludwig <arne.ludwig@posteo.de>
 *
 * This file is part of Community Service Manager.
 *
 * Community Service Manager is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 *
 * Community Service Manager is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with Community Service Manager. If not, see <http://www.gnu.org/licenses/>.
 */
csm_prevent_direct_execution();
EOF

define PHP_FOOTER <<EOF
?>
EOF

SOURCE_FILES=(
  {include,tests,vendor}'/**/*.php'
  'tests/fixtures/*.yml'
  'runtask'
  'community-service-manager.php'
);

function run_task() {
  TASK="$(peek_params)"
  shift_params
  TASK_CALL=""
  case "$TASK" in
    test)
      TASK_CALL='run_tests'
      ;;
    gen|generate)
      TARGET="$(peek_params)"
      shift_params
      case "$TARGET" in
        test|class)
          TASK_CALL="generate_$TARGET"
          ;;
        *)
          set_error "unknown target `$TARGET`"
          TASK_CALL='show_help_generate'
      esac
      ;;
    watch)
      TASK_CALL='watch_command'
      ;;
    help)
      TOPIC="$(peek_params)"
      shift_params
      case "$TOPIC" in
        generate|test|watch)
          TASK_CALL="show_help_$TOPIC"
          ;;
        *)
          set_error "unknown topic `$TOPIC`"
          TASK_CALL='show_help'
      esac
      ;;
    *)
      set_error "unknown task `$TASK`"
      TASK_CALL='show_help'
      ;;
  esac

  "$TASK_CALL" "$@"
  if has_flag 'error'; then
    echo "$ERROR_MSG" >&2
    return 1
  fi
}

function fetch_flags() {
  FLAGS=''
  while peek_params > /dev/null; do
    case "$(peek_params)" in
      -f|--force)
        add_flag 'force'
        ;;
      -w|--watch)
        add_flag 'watch'
        ;;
      -o|--file=*)
        add_flag 'file_out'
        if [[ "$(peek_params)" =~ --file=(.*) ]]; then
          FILE_OUT="${BASH_REMATCH[1]}"
        else
          shift_params
          FILE_OUT="$(peek_params)"
        fi
        ;;
      *)
        return
        ;;
    esac
    shift_params
  done
}

function add_flag() {
  FLAGS="$FLAGS $@"
}

function has_flag() {
  RE='\b'"$1"'\b'
  [[ "$FLAGS" =~ $RE ]] || return 1
}

function set_error() {
  add_flag 'error'
  ERROR_MSG="error: $@"
}

function shift_params() {
  unset PARAMS[0]
  PARAMS=("${PARAMS[@]}")

  [[ ${#PARAMS[*]} -gt 0 ]] || return 1
}

function peek_params() {
  echo "${PARAMS[0]:-${1:-}}"

  [[ ${#PARAMS[*]} -gt 0 ]] || return 1
}

function show_help() {
  cat <<'EOF'
USAGE runtask [-fw] TASK ARGS...

Execute TASK for this project. See TASKS below for a listing of avaible tasks
and use `runtask help TASK` for additional information.


FLAGS

-f, --force  [generate]
      Force overwriting of existing files.
-w, --watch  [test]
      Watch the source files for changes and execute tests accordingly.


TASKS

test [CASE [TEST]]
      Run test upon file changes. Runs all test or a specific test case (class
      CASE) or even a specific test (method TEST) only.
generate TARGET ARGS...
      Generate file stubs for different purposes.
help [TOPIC]
      Show help (for TOPIC).
watch COMMAND
      Watch source files for chages and execute COMMAND accordingly.
EOF
}

function show_help_test() {
  cat <<'EOF'
USAGE runtask [-w] test [CASE [TEST]]

Run test upon file changes. Runs all test or a specific test case (class CASE)
or even a specific test (method TEST) only.


FLAGS

-w, --watch
      Watch the source files for changes and execute tests accordingly.
EOF
}

function show_help_generate() {
  cat <<'EOF'
USAGE runtask [-f] generate TARGET ARGS...

Generate different stub files already including licensing information and
direct execution prevention.


FLAGS

-f, --force
      Force overwriting of existing files.


TARGETS

test CATEGORY CLASS
      Create a test case stub in `tests/CATEGORY` with class name CLASS.
class CLASS [METHODS...]
      Create a class stub in `include`. The class will be automatically
      prefixed with 'CSM_'.
EOF
}

function show_help_watch() {
  cat <<'EOF'
USAGE runtask watch COMMAND

Watch source files for chages and execute COMMAND accordingly. Occurrences
of $FILENAME in COMMAND will be replaced with the name of the file that has
changed.
EOF
}

function run_tests() {
  QUERY='action=csm-tests&f=text';
  if [[ -n "$(peek_params)" ]]; then
    QUERY="$QUERY&c=$(peek_params)"
    shift_params

    if [[ -n "$(peek_params)" ]]; then
      QUERY="$QUERY&t=$(peek_params)"
      shift_params
    fi
  fi

  URL='http://localhost/alpenverein-jena.de/index.php'"?$QUERY"
  CMD='curl'

  if has_flag 'watch'; then
    if has_flag 'file_out'; then
      watch_files "$CMD '$URL' 2> /dev/null 1> $FILE_OUT" "${SOURCE_FILES[@]}"
    else
      watch_files "$CMD '$URL' 2> /dev/null" "${SOURCE_FILES[@]}"
    fi
  else
    if has_flag 'file_out'; then
      "$CMD" "$URL" 2> /dev/null 1> "$FILE_OUT"
    else
      "$CMD" "$URL" 2> /dev/null
    fi
  fi
}

function generate_class() {
  CLASS="$(peek_params)"
  shift_params
  if [[ -z "$CLASS" ]]; then
    set_error "missing CLASS"
    return
  fi
  FNAME="class-csm-$(camel_to_dashed "$CLASS").php"
  CLASS="CSM_$CLASS"
  FULL_PATH="include/$FNAME"
  has_flag 'force' ||
    { warn_if_file_exists "$FULL_PATH" && return; }

  cat > "$FULL_PATH" <<EOF
${PHP_HEADER}

class $CLASS {
  public function __construct() {
    assert(false, 'Call to unimplemented Method $CLASS::__construct().'); // TODO
  }
EOF
  if [[ -n "$@" ]]; then
    for METHOD in "$@"; do
      cat >> "$FULL_PATH" <<EOF

  public function $METHOD() {
    assert(false, 'Call to unimplemented Method $CLASS::$METHOD().'); // TODO
  }
EOF
    done
  fi 
  cat >> "$FULL_PATH" <<EOF
}
${PHP_FOOTER}
EOF
}

function generate_test() {
  CATEGORY="$(peek_params)"
  shift_params
  CLASS="$(peek_params)"
  shift_params
  if [[ -z "$CATEGORY" ]]; then
    set_error 'missing CLASS'
  elif [[ -z "$CLASS" ]]; then
    set_error 'missing CATEGORY'
  fi
  FNAME="$(camel_to_dashed "$CLASS").php"
  FULL_PATH="tests/$CATEGORY/$FNAME"
  has_flag 'force' ||
    { warn_if_file_exists "$FULL_PATH" && return; }

  cat > "$FULL_PATH" <<EOF
${PHP_HEADER}

class $CLASS extends CSM_UnitTestCase {
  function __construct() {
    parent::__construct(array(
      // TODO place fixture names here
    ));
  }

  function setUp() {
    parent::setUp();
    // TODO need setup?
  }

  function test_the_answer_is_fourtytwo() {
    // TODO write your own tests
    $this->assertTrue(42);
  }
}
${PHP_FOOTER}
EOF
}

function watch_command() {
  COMMAND="$(peek_params)"
  shift_params
  watch_files "$COMMAND" "${SOURCE_FILES[@]}"
}

function watch_files() {
  CMD="$1"
  shift
  if which 'filewatcher++' &> /dev/null; then
    filewatcher++ "$@" "$CMD"
  elif which 'filewatcher' &> /dev/null; then
    filewatcher "$@" "$CMD"
  else
    echo "Could not watch files: no watching utility found." >&2
    echo "Hint: remove the -w/--watch flag to execute the tests once" >&2
    exit 1
  fi
}

function warn_if_file_exists() {
  if [[ -e "$1" ]]; then
    set_error "file '$1' already exists. Nothing done." >&2
    return 0
  else
    return 1
  fi
}

function camel_to_dashed() {
  echo -n "$(php -r "include 'vendor/functions-str.php'; echo str_camel_to_dashed('$1', false);")"
}

PARAMS=("$@")
fetch_flags
run_task